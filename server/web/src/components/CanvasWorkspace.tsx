import { useState, useEffect } from 'react';
import { Page, Workspace } from '@/types';
import { 
  BarChart3, 
  GitBranch, 
  Clock, 
  Database, 
  TrendingUp, 
  Eye, 
  ChevronRight,
  ChevronDown,
  Play,
  Square,
  RotateCcw,
  Filter,
  Search,
  Download,
  Share,
  Settings
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';
import ReactMarkdown from 'react-markdown';

interface CanvasWorkspaceProps {
  page: Page;
  workspace: Workspace;
  onNavigateBack: () => void;
  onUpdatePage: (updates: Partial<Page>) => void;
}

interface AnalysisCommit {
  id: string;
  threadId: string;
  commitMessage: string;
  queryText: string;
  resultData: any;
  analysisSummary: string;
  previewData: any;
  performanceMetrics: any;
  parentCommit?: string;
  isHead: boolean;
  createdAt: Date;
}

interface CanvasThread {
  id: string;
  name: string;
  status: 'idle' | 'running' | 'completed' | 'failed';
  queryText: string;
  complexityLevel: 'quick' | 'deep' | 'custom';
  autoGeneratedName: boolean;
  createdAt: Date;
  updatedAt: Date;
  commits: AnalysisCommit[];
  progressLogs: any[];
}

export const CanvasWorkspace = ({ page, workspace, onNavigateBack, onUpdatePage }: CanvasWorkspaceProps) => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [activeCommit, setActiveCommit] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedView, setSelectedView] = useState<'analysis' | 'data' | 'history'>('analysis');
  
  // Mock canvas thread data - in real implementation, this would come from the database
  const [canvasThread, setCanvasThread] = useState<CanvasThread>({
    id: 'thread_123',
    name: page.title || 'Canvas Analysis',
    status: 'completed',
    queryText: 'How many products do we have in our inventory?',
    complexityLevel: 'quick',
    autoGeneratedName: false,
    createdAt: new Date(),
    updatedAt: new Date(),
    commits: [
      {
        id: 'commit_1',
        threadId: 'thread_123',
        commitMessage: 'Initial product count analysis',
        queryText: 'SELECT COUNT(*) as product_count, STRING_AGG(product_name, \',\') as product_names FROM products',
        resultData: {
          product_count: 10,
          product_names: 'Smartphone XYZ,Laptop Pro,Wireless Headphones,T-shirt Basic,Jeans Classic,Coffee Maker,Blender Pro,Fiction Bestseller,Cookbook,Tennis Racket'
        },
        analysisSummary: `SQL Query Results Analysis

Key Patterns and Trends
The query results show a total of 10 different products.
The products are diverse and span across various categories such as electronics, clothing, kitchen appliances, books, and sports equipment.

This indicates a well-diversified product portfolio covering multiple market segments.`,
        previewData: {
          summary: 'SQL Query Results Analysis\n\nKey Patterns and Trends\nThe query results show a total of 10 different products.',
          stats: [
            { label: 'ROWS', value: '1' },
            { label: 'COLUMNS', value: '2' },
            { label: 'NUMERIC FIELDS', value: '1' },
            { label: 'SQL LINES', value: '2' }
          ],
          tablePreview: {
            headers: ['product_count', 'product_names'],
            rows: [[
              '10', 
              'Smartphone XYZ,Laptop Pro,Wireless Headphones,T-shirt Basic,Jeans Classic,Coffee Maker,Blender Pro,Fiction Bestseller,Cookbook,Tennis Racket'
            ]],
            totalRows: 1
          },
          charts: [
            { type: 'line', title: 'Line Chart' },
            { type: 'pie', title: 'Pie Chart' }
          ]
        },
        performanceMetrics: {
          queryTime: '45ms',
          rowsProcessed: 10,
          memoryUsed: '2.1MB'
        },
        isHead: true,
        createdAt: new Date()
      }
    ],
    progressLogs: []
  });

  const currentCommit = canvasThread.commits.find(c => c.isHead) || canvasThread.commits[0];

  const handleRunNewQuery = () => {
    // TODO: Implement new query functionality
    console.log('Running new query...');
  };

  const handleCommitSelect = (commitId: string) => {
    setActiveCommit(commitId);
  };

  return (
    <div className="flex h-screen bg-white">
      {/* Sidebar - Thread History */}
      <div className={cn(
        "border-r border-gray-200 bg-gray-50 transition-all duration-200",
        sidebarCollapsed ? "w-12" : "w-80"
      )}>
        {/* Sidebar Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="h-8 w-8 p-0"
            >
              {sidebarCollapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
            </Button>
            {!sidebarCollapsed && (
              <div className="flex items-center gap-2">
                <GitBranch className="h-4 w-4 text-gray-600" />
                <span className="font-medium text-sm">Thread History</span>
              </div>
            )}
          </div>
        </div>

        {!sidebarCollapsed && (
          <>
            {/* Thread Info */}
            <div className="p-4 border-b border-gray-200">
              <div className="flex items-center gap-2 mb-2">
                <BarChart3 className="h-5 w-5 text-blue-600" />
                <h2 className="font-semibold">{canvasThread.name}</h2>
              </div>
              <div className="text-xs text-gray-500 space-y-1">
                <div>Status: <span className={cn(
                  "font-medium",
                  canvasThread.status === 'completed' && "text-green-600",
                  canvasThread.status === 'running' && "text-blue-600",
                  canvasThread.status === 'failed' && "text-red-600"
                )}>{canvasThread.status}</span></div>
                <div>Complexity: {canvasThread.complexityLevel}</div>
                <div>Created: {canvasThread.createdAt.toLocaleDateString()}</div>
              </div>
            </div>

            {/* Search */}
            <div className="p-4 border-b border-gray-200">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search commits..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9 h-8 text-sm"
                />
              </div>
            </div>

            {/* Commit History */}
            <div className="flex-1 overflow-y-auto">
              <div className="p-4">
                <h3 className="text-sm font-medium text-gray-700 mb-3">Commits</h3>
                <div className="space-y-2">
                  {canvasThread.commits.map((commit, index) => (
                    <div
                      key={commit.id}
                      className={cn(
                        "p-3 rounded-lg border cursor-pointer transition-colors",
                        activeCommit === commit.id || (activeCommit === null && commit.isHead)
                          ? "border-blue-300 bg-blue-50"
                          : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                      )}
                      onClick={() => handleCommitSelect(commit.id)}
                    >
                      <div className="flex items-center gap-2 mb-1">
                        <div className={cn(
                          "w-2 h-2 rounded-full",
                          commit.isHead ? "bg-green-500" : "bg-gray-400"
                        )} />
                        <span className="text-sm font-medium">{commit.commitMessage}</span>
                        {commit.isHead && (
                          <span className="text-xs bg-green-100 text-green-700 px-1.5 py-0.5 rounded">HEAD</span>
                        )}
                      </div>
                      <div className="text-xs text-gray-500 mb-2">
                        {commit.createdAt.toLocaleString()}
                      </div>
                      <div className="text-xs text-gray-600 font-mono bg-gray-100 p-2 rounded">
                        {commit.queryText.substring(0, 80)}...
                      </div>
                      {commit.performanceMetrics && (
                        <div className="flex gap-3 mt-2 text-xs text-gray-500">
                          <span>‚ö° {commit.performanceMetrics.queryTime}</span>
                          <span>üìä {commit.performanceMetrics.rowsProcessed} rows</span>
                          <span>üíæ {commit.performanceMetrics.memoryUsed}</span>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </>
        )}
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="border-b border-gray-200 bg-white">
          <div className="flex items-center justify-between p-4">
            <div className="flex items-center gap-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={onNavigateBack}
                className="text-gray-600 hover:text-gray-900"
              >
                ‚Üê Back to Page
              </Button>
              <div className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5 text-blue-600" />
                <h1 className="text-lg font-semibold">{page.title}</h1>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Button size="sm" variant="outline" onClick={handleRunNewQuery}>
                <Play className="h-4 w-4 mr-2" />
                New Query
              </Button>
              <Button size="sm" variant="outline">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
              <Button size="sm" variant="outline">
                <Share className="h-4 w-4 mr-2" />
                Share
              </Button>
              <Button size="sm" variant="ghost">
                <Settings className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* View Tabs */}
          <div className="flex border-t border-gray-200">
            {[
              { id: 'analysis', label: 'Analysis', icon: Eye },
              { id: 'data', label: 'Data', icon: Database },
              { id: 'history', label: 'History', icon: Clock }
            ].map(({ id, label, icon: Icon }) => (
              <button
                key={id}
                className={cn(
                  "flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors",
                  selectedView === id
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-600 hover:text-gray-900"
                )}
                onClick={() => setSelectedView(id as any)}
              >
                <Icon className="h-4 w-4" />
                {label}
              </button>
            ))}
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {selectedView === 'analysis' && currentCommit && (
            <div className="max-w-4xl mx-auto space-y-6">
              {/* Analysis Summary */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                <div className="flex items-center gap-2 mb-4">
                  <Eye className="h-5 w-5 text-blue-600" />
                  <h2 className="text-lg font-semibold text-blue-900">Analysis Summary</h2>
                </div>
                <div className="prose prose-sm max-w-none">
                  <ReactMarkdown>{currentCommit.analysisSummary}</ReactMarkdown>
                </div>
              </div>

              {/* Key Statistics */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {currentCommit.previewData.stats.map((stat: any, index: number) => (
                  <div key={index} className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <div className="text-xs text-gray-500 uppercase tracking-wide">{stat.label}</div>
                    <div className="text-2xl font-bold text-gray-900 mt-1">{stat.value}</div>
                  </div>
                ))}
              </div>

              {/* Performance Metrics */}
              {currentCommit.performanceMetrics && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <h3 className="font-medium text-gray-900 mb-3">Performance</h3>
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Query Time:</span>
                      <span className="ml-2 font-medium">{currentCommit.performanceMetrics.queryTime}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Rows Processed:</span>
                      <span className="ml-2 font-medium">{currentCommit.performanceMetrics.rowsProcessed}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Memory Used:</span>
                      <span className="ml-2 font-medium">{currentCommit.performanceMetrics.memoryUsed}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Charts Preview */}
              {currentCommit.previewData.charts && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {currentCommit.previewData.charts.map((chart: any, index: number) => (
                    <div key={index} className="bg-white border border-gray-200 rounded-lg p-6">
                      <div className="flex items-center gap-2 mb-4">
                        <TrendingUp className="h-5 w-5 text-green-600" />
                        <h3 className="font-medium">{chart.title}</h3>
                      </div>
                      <div className="h-48 bg-gray-50 rounded flex items-center justify-center text-gray-500">
                        üìä {chart.type.charAt(0).toUpperCase() + chart.type.slice(1)} Chart Preview
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {selectedView === 'data' && currentCommit && (
            <div className="max-w-6xl mx-auto">
              {/* Query */}
              <div className="mb-6">
                <h2 className="text-lg font-semibold mb-3">SQL Query</h2>
                <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm">
                  {currentCommit.queryText}
                </div>
              </div>

              {/* Data Table */}
              <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Database className="h-5 w-5 text-gray-600" />
                      <h3 className="font-medium">Query Results</h3>
                      <span className="text-sm text-gray-500">
                        ({currentCommit.previewData.tablePreview.totalRows} rows)
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button size="sm" variant="outline">
                        <Filter className="h-4 w-4 mr-2" />
                        Filter
                      </Button>
                      <Button size="sm" variant="outline">
                        <Download className="h-4 w-4 mr-2" />
                        Download CSV
                      </Button>
                    </div>
                  </div>
                </div>
                
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        {currentCommit.previewData.tablePreview.headers.map((header: string, index: number) => (
                          <th key={index} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            {header}
                          </th>
                        ))}
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {currentCommit.previewData.tablePreview.rows.map((row: any[], rowIndex: number) => (
                        <tr key={rowIndex} className="hover:bg-gray-50">
                          {row.map((cell: any, cellIndex: number) => (
                            <td key={cellIndex} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {cellIndex === 1 ? (
                                <div className="max-w-md truncate" title={cell}>
                                  {cell}
                                </div>
                              ) : (
                                cell
                              )}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}

          {selectedView === 'history' && (
            <div className="max-w-4xl mx-auto">
              <h2 className="text-lg font-semibold mb-6">Commit History</h2>
              <div className="space-y-4">
                {canvasThread.commits.map((commit, index) => (
                  <div key={commit.id} className="border border-gray-200 rounded-lg p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className={cn(
                          "w-3 h-3 rounded-full",
                          commit.isHead ? "bg-green-500" : "bg-gray-400"
                        )} />
                        <h3 className="font-medium">{commit.commitMessage}</h3>
                        {commit.isHead && (
                          <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded">HEAD</span>
                        )}
                      </div>
                      <span className="text-sm text-gray-500">
                        {commit.createdAt.toLocaleString()}
                      </span>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded mb-4">
                      <div className="text-sm font-medium text-gray-700 mb-2">Query:</div>
                      <code className="text-sm text-gray-900">{commit.queryText}</code>
                    </div>
                    
                    {commit.performanceMetrics && (
                      <div className="flex gap-6 text-sm text-gray-600">
                        <span>‚ö° {commit.performanceMetrics.queryTime}</span>
                        <span>üìä {commit.performanceMetrics.rowsProcessed} rows</span>
                        <span>üíæ {commit.performanceMetrics.memoryUsed}</span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}; 