export interface Block {
  id: string;
  type: 'text' | 'heading1' | 'heading2' | 'heading3' | 'bullet' | 'numbered' | 'quote' | 'divider' | 'image' | 'code' | 'subpage' | 'table' | 'toggle' | 'canvas' | 'stats' | 'graphing';
  content: string;
  order: number;
  indentLevel?: number; // For nested lists (0 = no indent, 1 = first level, etc.)
  isSelected?: boolean;
  properties?: {
    bold?: boolean;
    italic?: boolean;
    strikethrough?: boolean;
    code?: boolean;
    color?: string;
    // Table-specific properties
    tableData?: {
      rows: number;
      cols: number;
      data: string[][];
      headers?: string[];
    };
    // Toggle-specific properties
    toggleData?: {
      isOpen: boolean;
      children: Block[];
    };
    // Stats-specific properties
    statsData?: {
      stats: Array<{
        id: string;
        label: string;
        value: string;
      }>;
      columns: number;
    };
    // Graphing-specific properties
    graphingData?: {
      query: string;
      chartConfig?: any;
      chartData?: any;
      analysisResult?: any;
      lastGenerated?: Date;
    };
    // Subpage-specific properties
    subpageData?: {
      pageId: string;
      pageTitle: string;
      pageIcon?: string;
    };
    // Simplified canvas properties - just page reference
    canvasPageId?: string;
    threadName?: string;
    // Legacy canvas properties (for backward compatibility)
    canvasData?: {
      threadId: string;
      threadName: string;
      isExpanded: boolean;
      workspaceId: string;
      pageId: string;
      blockId: string;
      canvasPageId?: string;
      parentPageId?: string;
      blocks?: Block[];
      // Full analysis data
      fullAnalysis?: string;
      sqlQuery?: string;
      fullData?: {
        headers: string[];
        rows: any[][];
        totalRows: number;
      };
      preview?: {
        summary: string;
        stats: Array<{label: string, value: string}>;
        tablePreview: {
          headers: string[];
          rows: any[][];
          totalRows: number;
        };
        charts?: Array<{type: string, title: string}>;
      };
      // Persisted thread data for canvas workspaces
      threadData?: {
        id: string;
        name: string;
        status: 'idle' | 'running' | 'completed' | 'failed';
        queryText: string;
        complexityLevel: 'quick' | 'deep' | 'custom';
        autoGeneratedName: boolean;
        createdAt: Date;
        updatedAt: Date;
        commits: Array<{
          id: string;
          threadId: string;
          commitMessage: string;
          queryText: string;
          resultData: any;
          analysisSummary: string;
          previewData: any;
          performanceMetrics: any;
          parentCommit?: string;
          isHead: boolean;
          createdAt: Date;
        }>;
        progressLogs: any[];
      };
    };
    // Canvas page identification
    isCanvasPage?: boolean;
  };
}

export interface Page {
  id: string;
  title: string;
  icon?: string;
  blocks: Block[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Workspace {
  id: string;
  name: string;
  pages: Page[];
}

// Chart and visualization types
export interface ChartSuggestion {
  label: string;
  query: string;
  chartType: string;
  confidence: number;
}

export interface DataAnalysisResult {
  dataset_size: number;
  variable_types: Record<string, any>;
  dimensionality: {
    variable_count: number;
    primary_variable?: string;
    x_variable?: string;
    y_variable?: string;
  };
  statistical_summary?: any;
  semantic_insights?: any;
  recommendations?: any;
}

export interface PlotlyConfig {
  type: string;
  data: any[];
  layout: any;
  config?: any;
  mode?: string;
  marker?: any;
}

export interface ProcessedDataset {
  [key: string]: any;
}
