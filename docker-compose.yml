version: '3.8'

services:
#  api:
#    build: 
#      context: ./server
#      dockerfile: Dockerfile
#    volumes:
#      - ./server:/app
#    ports:
#      - "8000:8000"
#    environment:
#      - ENVIRONMENT=development
#      - DB_HOST=postgres
#      - DB_PORT=5432
#      - DB_NAME=dataconnector
#      - DB_USER=dataconnector
#      - DB_PASS=dataconnector
#    container_name: data-connector-api
#    restart: unless-stopped
#    networks:
#      - connector-network
#    depends_on:
#      - postgres

  # MCP Slack Server
  mcp-server:
    build:
      context: ./server
      dockerfile: Dockerfile.mcp
    volumes:
      - ./server:/app
      - ~/.data-connector:/root/.data-connector
    ports:
      - "8500:8500"
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8500
      - MCP_DB_HOST=postgres-mcp
      - MCP_DB_PORT=5432
      - MCP_DB_NAME=slackoauth
      - MCP_DB_USER=slackoauth
      - MCP_DB_PASSWORD=slackoauth
      - MCP_SLACK_CLIENT_ID=8865024836215.8876716673525
      - MCP_SLACK_CLIENT_SECRET=ec137e7d830f0c40505369ef943938f6
      - MCP_SLACK_SIGNING_SECRET=e1f73aea8dd46cf29bcd6a4aa3080875
      - MCP_API_BASE_URL=https://7454-2405-201-4011-b202-e1cf-31d2-65e2-f4e5.ngrok-free.app
      - MCP_SECRET_KEY=this_is_a_random_secret_key
      - MCP_WEB_APP_URL=http://localhost:3000
      - MCP_CORS_ORIGINS=["*"]
      - MCP_DEV_MODE=true
      - MCP_DEBUG=true
      - MCP_QDRANT_HOST=slack-qdrant
      - MCP_QDRANT_PORT=7750
      - MCP_QDRANT_GRPC_PORT=7751
    container_name: slack-mcp-server
    restart: unless-stopped
    networks:
      - connector-network
    depends_on:
      - postgres-mcp
      - slack-qdrant

  postgres:
    image: postgres:16
    ports:
      - "6000:5432"
    environment:
      - POSTGRES_USER=dataconnector
      - POSTGRES_PASSWORD=dataconnector
      - POSTGRES_DB=dataconnector
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    container_name: data-connector-postgres
    networks:
      - connector-network

  # PostgreSQL for Slack MCP
  postgres-mcp:
    image: postgres:16
    ports:
      - "6500:5432"
    environment:
      - POSTGRES_USER=slackoauth
      - POSTGRES_PASSWORD=slackoauth
      - POSTGRES_DB=slackoauth
    volumes:
      - postgres-mcp-data:/var/lib/postgresql/data
    container_name: slack-mcp-postgres
    networks:
      - connector-network

  mongodb:
    image: mongo:7
    ports:
      - "27000:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=dataconnector
      - MONGO_INITDB_ROOT_PASSWORD=dataconnector
      - MONGO_INITDB_DATABASE=dataconnector_mongo
    volumes:
      - mongodb-data:/data/db
      - ./init-mongodb:/docker-entrypoint-initdb.d
    container_name: data-connector-mongodb
    networks:
      - connector-network
    command: ["--auth"]

  qdrant:
    build: ./init-qdrant
    image: qdrant-custom:latest
    ports:
      - "7500:6333"  # HTTP port
      - "7501:6334"  # gRPC port
    volumes:
      - qdrant-data:/qdrant/storage
      - ./init-qdrant:/qdrant/init
    environment:
      - QDRANT_ALLOW_RECOVERY_MODE=true
    container_name: data-connector-qdrant
    networks:
      - connector-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readiness"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: ["/bin/bash", "-c", "(/qdrant/init/init.sh &) && /qdrant/qdrant"]

  # Dedicated Qdrant for Slack Messages
  slack-qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "7750:6333"  # HTTP port
      - "7751:6334"  # gRPC port
    volumes:
      - slack-qdrant-data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_RECOVERY_MODE=true
    container_name: slack-message-qdrant
    networks:
      - connector-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readiness"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  connector-network:
    driver: bridge

volumes:
  postgres-data:
  postgres-mcp-data:
  mongodb-data:
  qdrant-data:
  slack-qdrant-data: 